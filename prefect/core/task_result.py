import attr
from prefect.utilities.serializers import Serializable
from prefect.core.task import Task
from prefect.core.flow import Flow


@attr.s
class TaskResult(Serializable):

    flow = attr.ib(validator=attr.validators.instance_of(Flow))
    task = attr.ib(validator=attr.validators.instance_of(Task))

    def __getitem__(self, index):
        name = '{}[{}]'.format(self.task.name, index)
        index_task = IndexedTaskResult(index=index, name=name)
        return index_task(task_result=self.task)


class IndexedTaskResult(Task):

    def __init__(self, index, **kwargs):
        """
        A task that takes an input and returns that input indexed
        by a specific value.

        As a convenience, this task can be generated by indexing any other task:
            task = Task(...)
            indexed_task = task[3]

        """
        self.index = index
        super().__init__(**kwargs)

    def run(self, task_result):
        return task_result[self.index]

import abc
import ujson


class Serializer(metaclass=abc.ABCMeta):
    """
    Prefect tasks can produce results that are in turn consumed by other tasks.
    Serializers are used to efficiently transmit those results.

    Simple results can be passed directly between tasks, but larger or more
    complex objects may require special handling.

    Serializers implement two key methods: encode() and decode(). Note:

    Encode() is passed the result of a task and must return a
    JSON-serializeable key that can be used to retrieve the serialized result.

    The key generated by encode() is passed to decode() when the task result is
    required. Decode() is expected to return the original task result.

    Serializers may be instantiated seperately for encoding and decoding,
    so methods should not depend on shared state.
    """

    @abc.abstractmethod
    def encode(self, result):
        """
        Serialize a task run result.

        This method is passed a unique key and a result. It is expected to
        serialize the result and return a JSON-serializeable key that
        can be used to reconstruct the original result.
        """
        raise NotImplementedError()

    @abc.abstractmethod
    def decode(self, key):
        raise NotImplementedError()


class IdentitySerializer(Serializer):
    """
    This Serializer doesn't do anything
    """

    def encode(self, result):
        return result

    def decode(self, key):
        return key


class JSONSerializer(Serializer):
    """
    Serializes task results to JSON
    """

    def encode(self, result):
        return ujson.dumps(result)

    def decode(self, key):
        return ujson.loads(key)
